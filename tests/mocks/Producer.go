// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	conf "github.com/RedHatInsights/ccx-notification-service/conf"
	"github.com/RedHatInsights/ccx-notification-service/types"
	mock "github.com/stretchr/testify/mock"

	producer "github.com/RedHatInsights/ccx-notification-service/producer"
)

// Producer is an autogenerated mock type for the Producer type
type Producer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Producer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// New provides a mock function with given arguments that returns a KafkaProducer pointer
func (_m *Producer) New(brokerCfg conf.KafkaConfiguration) (*producer.KafkaProducer, error) {
	ret := _m.Called(brokerCfg)

	var r0 *producer.KafkaProducer
	if rf, ok := ret.Get(0).(func(conf.KafkaConfiguration) *producer.KafkaProducer); ok {
		r0 = rf(brokerCfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*producer.KafkaProducer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(conf.KafkaConfiguration) error); ok {
		r1 = rf(brokerCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProduceMessage provides a mock function with given fields: msg
func (_m *Producer) ProduceMessage(msg types.NotificationMessage) (int32, int64, error) {
	ret := _m.Called(msg)

	var r0 int32
	if rf, ok := ret.Get(0).(func(types.NotificationMessage) int32); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(types.NotificationMessage) int64); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(types.NotificationMessage) error); ok {
		r2 = rf(msg)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
